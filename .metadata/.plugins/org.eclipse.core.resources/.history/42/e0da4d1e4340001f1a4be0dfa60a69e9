package br.com.qwasolucoes.mentoria.implementacoes.logica_programacao;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import br.com.qwasolucoes.mentoria.interfaces.logica_programacao.LogicaProgramacao;
import br.com.qwasolucoes.mentoria.model.Funcionario;

public class LogicaProgramacaoProvider implements LogicaProgramacao {

	@Override
	public List<Funcionario> conversaoStringParaPessoa(List<String> lista) {

		return null;

	}

	@Override
	public List<String> conversaoPessoaParaString(List<Funcionario> pessoas) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Funcionario conversaoArrayParaPessoa(String[] array) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public List<Funcionario> conversaoArrayMultidimensionalParaPessoa(String[][] arrayMultidimensional) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public int[][] arrayMultidimensionalParesImparesPrimosResto(int[] array, int numeroDivisaoResto) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public String[] arrayMultidimensionalPorPosicoes(String[][] arrayMultidimensional, int coluna, int linha) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public String[] arrayMultidimensionalPorValor(String[][] arrayMultidimensional, String valor) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public String[] antecessorSucessorPor(String[] array, int posicao) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public String[] antecessorSucessorPor(String[] array, String valor) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public List<Integer> numerosPares(Integer limite) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public List<Integer> numerosImpares(Integer limite) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public List<Integer> numerosPrimos(Integer limite) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public int[] numerosParesArray(Integer limite) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public int[] numerosImparesArray(Integer limite) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public int[] numerosPrimosArray(Integer limite) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public int[] primeiraUltimaPosicaoArray(Integer limite) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public int[] quantidadeParesImparesPrimos(List<Integer> valores) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public int[] primeiraUltimaMediaPosicaoArray(Integer limite) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public List<Integer> removerInteirosDuplicados(List<Integer> numeros) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public List<BigDecimal> removerValoresDuplicados(List<BigDecimal> numeros) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public List<String> removerTextosDuplicados(List<String> textos) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Integer valorInteiroMaiorQtdDuplicados(List<Integer> numeros) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public String valorTextoMaiorQtdDuplicados(List<String> textos) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public List<Integer> listaInteirosDuplicados(List<Integer> numeros) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public List<BigDecimal> listaDecimalDuplicados(List<BigDecimal> textos) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public List<String> listaTextoDuplicados(List<String> textos) {

		List<String> lista = new ArrayList<>();

		lista.add("Manoel");
		lista.add("Manoel");
		lista.add("Manoel");
		lista.add("Manoel");
		lista.add("Manoel");
		lista.add("Manoel");
		lista.add("João");

		String repetidos = "Manoel";

		int contador = 0;

		for (String string : lista) {
			if (string.equals(repetidos)) {
				contador++;

			}
		}
		System.out.println("O nome: " + repetidos + " foi repetido: " + contador);
		return lista;

	}

	@Override
	public Integer somarValores(Integer limite) {

		int soma = limite;

		for (int i = 0; i <= limite; i++) {
			if (2 != 0) {
				soma += limite;
				System.out.print(" " + soma);
			}

		}
		return soma;
	}

	@Override
	public Integer somarValoresPares(Integer limite) {
		int resultado = limite;

		for (int i = 0; i <= limite; i++) {
			if (i % 2 == 0) {
				resultado += i * limite;
				System.out.println(resultado);
			}
		}
		return resultado;
	}

	@Override
	public Integer somarValoresImpares(Integer limite) {

		int resultado = limite;

		for (int i = 0; i <= limite; i++) {

			if (i % 2 != 0) {

				resultado += i * limite;

				System.out.println(resultado);

			}

		}
		return resultado;
	}

	@Override
	public Integer somarValoresPrimos(Integer limite) {

		List<Integer> somarValoresPrimos = new ArrayList<>();

		int obter = limite;
		int contador = 0;
		for (int i = 1; i <= obter; i++) {
			if (limite % i == 0) {
				contador++;
				
			}
		}
		if(contador == 2) {
			System.out.println("O " + obter + " é numero primo" );
		}
			return obter;
		}

		

	

	@Override
	public Integer somarValoresPosicoes(int[] valores) {

		int soma = valores[0];

		for (int i = 0; i < valores.length; i++) {
			if (valores[i] * 2 != 0) {
				soma += valores[i];
				System.out.print(" " + soma);
			}

		}
		return soma;
	}

	@Override
	public Integer somarValoresParesPosicoes(int[] valores) {

		int soma = valores[0];

		for (int i = 0; i < valores.length; i++) {
			if (valores[i] % 2 == 0) {
				soma += valores[i];
				System.out.print(" " + soma);
			}

		}
		return soma;
	}

	@Override
	public Integer somarValoresImparesPosicoes(int[] valores) {

		int soma = valores[0];
		for (int i = 0; i < valores.length; i++) {
			if (valores[i] % 2 != 0) {
				soma += valores[i];
				System.out.println(soma);
			}

		}
		return soma;
	}

	@Override
	public Integer somarValoresPrimosPosicoes(int[] valores) {

		int soma = valores[7];

		for (int i = 0; i < valores.length; i++) {

			soma += valores[i];

			System.out.println(soma);

		}

		return soma;
	}

	@Override
	public Integer somarValoresPosicoesParesMultiplosDe(Integer limite, Integer multiplo) {

		int resultado = limite;

		for (int i = 0; i <= limite; i++) {

			if (i % 2 == 0) {

				resultado += i * multiplo;

				System.out.println(multiplo + " multiplo " + resultado);

			}

		}
		return resultado;
	}

	@Override
	public boolean multiploDeSete(int valor) {
		if (valor % 7 == 0) {

			return true;

		} else {

			return false;

		}
	}

	@Override
	public String parOuImpar(int valor) {
		if (valor % 2 == 0) {

			return "PAR";

		} else {

			return "IMPA";

		}
	}

	@Override
	public String parOuImparOuZero(int valor) {
		if (valor == 0) {

			return " ZERO";

		} else if (valor % 2 == 0) {

			return " PAR ";

		} else {

			return " IMPA ";

		}
	}

	@Override
	public int[] obterDobrosAteDobroInformado(int valor) {
		List<Integer> obterDobrosAteDobroInformado = new ArrayList<>();

		int[] obter = new int[valor];

		while (valor <= 10) {

			obterDobrosAteDobroInformado.add(valor * 2);

			valor++;

		}

		System.out.println(obterDobrosAteDobroInformado);

		return obter;
	}

	@Override
	public int[] obterDobrosAteDez(int valor) {

		List<Integer> obterDobrosAteDez = new ArrayList<>();

		int[] obter = new int[valor];

		while (valor <= 10) {

			obterDobrosAteDez.add(valor * 2);
			valor++;

		}
		System.out.println(obterDobrosAteDez);

		return obter;

	}

	@Override
	public int[] obterDobrosAteMil(int valor) {

		int obterDobros = valor;

		int[] obter = new int[obterDobros];

		do {

			System.out.println(obterDobros);

			obterDobros = obterDobros * 2;

		} while (obterDobros < 1000);

		System.out.println(obterDobros);

		return obter;

	}

	@Override
	public int[][] tabuada(int valor) {

		int linhas = valor * 10;
		int colunas = 4;
		int resultado = 0;

		int[][] tabela = new int[linhas][colunas];

		for (int i = 1; i <= valor; i++) {
			for (int j = 1; j <= 10; j++) {
				tabela[resultado][0] = i;
				tabela[resultado][1] = j;
				tabela[resultado][2] = i * j;
				resultado++;
			}
		}

		return tabela;

	}
}
